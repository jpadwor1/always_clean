// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @unique
  email String @unique

  name            String
  address         String
  phone           String
  lastServiceDate DateTime     @default(now())
  nextServiceDate DateTime     @default(now())
  photoURL        String?
  role            Role         @default(USER)
  customerType    CustomerType @default(LEAD)

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

model Customer {
  id    String @id @unique
  email String @unique

  services            ServiceEvent[]
  name                String
  address             String
  phone               String
  lastServiceDate     DateTime       @default(now())
  nextServiceDate     DateTime       @default(now())
  role                Role           @default(USER)
  customerType        CustomerType   @default(LEAD)
  isProfileComplete   Boolean        @default(false)
  specialInstructions String?        @db.VarChar(300)
  preferredServiceDay Day?
  communicationEmails Boolean        @default(true)
  communicationTexts  Boolean        @default(true)

  photoURL               String?
  stripeCustomerId       String?         @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?         @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?         @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime?       @map(name: "stripe_current_period_end")
  stripeBalanceDue       Boolean?
  amountDue              Float?
  dueDate                String?
  lastInvoiceSent        DateTime?
  
  CalendarEvent          CalendarEvent[]
}

model ServiceEvent {
  id String @id @default(cuid())

  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?

  technicianId String?

  name             String
  notes            String?           @db.VarChar(300)
  dateCompleted    DateTime          @default(now())
  tasksPerformed   String?
  serviceChemicals ServiceChemical[]
  files            File[]

  @@index([customerId])
}

model CalendarEvent {
  id           String    @id @default(cuid())
  title        String
  start        DateTime
  end          DateTime
  allDay       Boolean
  editable     String    @default("false")
  description  String?   @map("extendedProps_description")
  location     String    @map("extendedProps_location")
  email        String?   @map("extendedProps_email")
  phone        String?   @map("extendedProps_phone")
  customerId   String?   @map("extendedProps_customerId")
  customerName String?   @map("extendedProps_customerName")
  customer     Customer? @relation(fields: [customerId], references: [id])

  @@index([customerId])
}

model Chemical {
  id       String            @id @default(cuid())
  name     String            @unique
  price    Float
  units    String
  services ServiceChemical[]
}

model ServiceChemical {
  id             String       @id @default(cuid())
  serviceEvent   ServiceEvent @relation(fields: [serviceEventId], references: [id], onDelete: Cascade)
  serviceEventId String
  chemical       Chemical     @relation(fields: [chemicalId], references: [id])
  chemicalId     String
  quantity       Int // Quantity of chemical used

  @@index([chemicalId])
  @@index([serviceEventId])
}

model File {
  id   String @id @default(cuid())
  name String

  uploadStatus UploadStatus @default(PENDING)

  url String
  key String

  createdAt DateTime @default(now())

  ServiceEvent   ServiceEvent? @relation(fields: [serviceEventId], references: [id])
  serviceEventId String?

  @@index([serviceEventId])
}

enum Role {
  USER
  ADMIN
}

enum UploadStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

enum CustomerType {
  LEAD
  ACTIVE
  INACTIVE
  LOST
  VIP
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}
